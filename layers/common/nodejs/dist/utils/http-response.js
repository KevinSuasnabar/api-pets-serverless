"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.httpResponse = exports.HttpResponseBuilder = void 0;
const types_1 = require("./types");
const DEFAULT_HEADERS = {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Credentials': 'true',
};
class HttpResponseBuilder {
    constructor() {
        this.response = {
            statusCode: types_1.HttpStatusCode.OK,
            headers: { ...DEFAULT_HEADERS },
            body: '',
        };
    }
    setStatusCode(statusCode) {
        this.response.statusCode = statusCode;
        return this;
    }
    setHeaders(headers) {
        this.response.headers = { ...this.response.headers, ...headers };
        return this;
    }
    setBody(data) {
        const apiResponse = {
            success: this.response.statusCode < 400,
            data,
        };
        this.response.body = JSON.stringify(apiResponse);
        return this;
    }
    setError(code, message, details) {
        const apiResponse = {
            success: false,
            error: {
                code,
                message,
                details,
            },
        };
        this.response.body = JSON.stringify(apiResponse);
        return this;
    }
    build() {
        return this.response;
    }
}
exports.HttpResponseBuilder = HttpResponseBuilder;
// Helper functions for common responses
exports.httpResponse = {
    ok: (data) => {
        return new HttpResponseBuilder()
            .setStatusCode(types_1.HttpStatusCode.OK)
            .setBody(data)
            .build();
    },
    created: (data) => {
        return new HttpResponseBuilder()
            .setStatusCode(types_1.HttpStatusCode.CREATED)
            .setBody(data)
            .build();
    },
    badRequest: (message, details) => {
        return new HttpResponseBuilder()
            .setStatusCode(types_1.HttpStatusCode.BAD_REQUEST)
            .setError(types_1.ErrorCode.VALIDATION_ERROR, message, details)
            .build();
    },
    notFound: (message = 'Resource not found') => {
        return new HttpResponseBuilder()
            .setStatusCode(types_1.HttpStatusCode.NOT_FOUND)
            .setError(types_1.ErrorCode.NOT_FOUND, message)
            .build();
    },
    unauthorized: (message = 'Unauthorized') => {
        return new HttpResponseBuilder()
            .setStatusCode(types_1.HttpStatusCode.UNAUTHORIZED)
            .setError(types_1.ErrorCode.UNAUTHORIZED, message)
            .build();
    },
    forbidden: (message = 'Forbidden') => {
        return new HttpResponseBuilder()
            .setStatusCode(types_1.HttpStatusCode.FORBIDDEN)
            .setError(types_1.ErrorCode.FORBIDDEN, message)
            .build();
    },
    conflict: (message, details) => {
        return new HttpResponseBuilder()
            .setStatusCode(types_1.HttpStatusCode.CONFLICT)
            .setError(types_1.ErrorCode.CONFLICT, message, details)
            .build();
    },
    internalError: (message = 'Internal server error', details) => {
        return new HttpResponseBuilder()
            .setStatusCode(types_1.HttpStatusCode.INTERNAL_SERVER_ERROR)
            .setError(types_1.ErrorCode.INTERNAL_ERROR, message, details)
            .build();
    },
};
//# sourceMappingURL=data:application/json;base64,